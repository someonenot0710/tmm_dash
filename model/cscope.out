cscope 15 $HOME/tmm/repos/ns-3-allinone/ns-3-dev/src/dash/model               0000051213
	@algorithms/aaash-client.cc

8 
	~"Øash-˛õ¡.h
"

9 
	~<ns3/log.h
>

10 
	~<ns3/simuœt‹.h
>

11 
	~<ns3/dash-˛õ¡.h
>

13 
NS_LOG_COMPONENT_DEFINE
("AaashClient");

15 
«me•a˚
 
	gns3


17 
NS_OBJECT_ENSURE_REGISTERED
(
AØshClõ¡
);

19 
Ty≥Id


20 
	gAØshClõ¡
::
GëTy≥Id
()

22 
Ty≥Id
 
tid
 =

23 
Ty≥Id
("ns3::AØshClõ¡").
SëP¨ít
<
DashClõ¡
>().
AddC⁄°ru˘‹
<

24 
AØshClõ¡
>();

25  
	gtid
;

28 
	gAØshClõ¡
::
AØshClõ¡
() :

29 
m_ru¬ög_Á°_°¨t
(
åue
)

35 
AØshClõ¡
::~AaashClient()

41 
AØshClõ¡
::
CÆcNextSegmít
(
uöt32_t
 
cuºR©e
, uöt32_à& 
√xtR©e
,

42 
Time
 & 
dñay
)

44 
uöt32_t
 
	gøãs
[] =

51 
uöt32_t
 
	gøãs_size
 = (
øãs
) / (rates[0]);

53 
	ga1
 = 0.75;

54 
	ga2
 = 0.33;

55 
	ga3
 = 0.5;

56 
	ga4
 = 0.75;

57 
	ga5
 = 0.9;

59 
Time
 
b_mö
("10s");

60 
Time
 
b_low
("20s");

61 
Time
 
b_high
("50s");

62 
Time
 
	gb_›t
 = 
Sec⁄ds
((
b_low
 + 
b_high
).
GëSec⁄ds
() * 0.5);

64 
Time
 
èf
(
MûliSec⁄ds
(
MPEG_FRAMES_PER_SEGMENT
 * 
MPEG_TIME_BETWEEN_FRAMES
));

66 
Time
 
	gb_t
 = 
m_buf„rSèã
.
rbegö
()->
£c⁄d
;

69 
uöt32_t
 
	gøãInd
 = 
øãs_size
;

70 
uöt32_t
 
	gi
 = 0; i < 
	gøãs_size
; i++)

72 i‡(
	gøãs
[
i
] =
cuºR©e
)

74 
øãInd
 = 
i
;

78 i‡(
	gøãInd
 =
øãs_size
)

80 
NS_FATAL_ERROR
("WrongÑate");

83 
	g√xtR©e
 = 
cuºR©e
;

84 
	gdñay
 = 
Sec⁄ds
(0);

86 
uöt32_t
 
	gr_up
 = 
øãs
[
øãInd
];

87 
uöt32_t
 
	gr_down
 = 
øãs
[
øãInd
];

88 i‡(
	gøãInd
 + 1 < 
	gøãs_size
)

90 
	gr_up
 = 
øãs
[
øãInd
 + 1];

92 i‡(
	gøãInd
 >= 1)

94 
r_down
 = 
øãs
[
øãInd
 - 1];

99 i‡(
	gm_ru¬ög_Á°_°¨t
 && (
	gøãInd
 !
øãs_size
 - 1Ë&& 
Buf„rInc
()

100 && (
cuºR©e
 <
a1
 * 
m_bôøãE°im©e
))

102 i‡(
b_t
 < 
b_mö
)

104 i‡(
r_up
 <
a2
 * 
m_bôøãE°im©e
)

106 
√xtR©e
 = 
r_up
;

109 i‡(
	gb_t
 < 
	gb_low
)

111 i‡(
	gr_up
 <
a3
 * 
m_bôøãE°im©e
)

113 
√xtR©e
 = 
r_up
;

118 i‡(
	gr_up
 <
a4
 * 
m_bôøãE°im©e
)

120 
√xtR©e
 = 
r_up
;

122 i‡(
	gb_t
 > 
	gb_high
)

124 
	gdñay
 = 
b_high
 - 
èf
;

130 
	gm_ru¬ög_Á°_°¨t
 = 
Ál£
;

131 i‡(
	gb_t
 < 
	gb_mö
)

133 
	g√xtR©e
 = 
øãs
[0];

135 i‡(
	gb_t
 < 
	gb_low
)

137 i‡(
	gcuºR©e
 !
øãs
[0] && 
cuºR©e
 >
m_bôøãE°im©e
)

139 
√xtR©e
 = 
r_down
;

142 i‡(
	gb_t
 < 
	gb_high
)

144 i‡((
	gcuºR©e
 =
øãs
[
øãs_size
 - 1])

145 || (
r_up
 >
a5
 * 
m_bôøãE°im©e
))

147 
dñay
 = 
°d
::
max
(
b_t
 - 
èf
, 
b_›t
);

152 i‡((
	gcuºR©e
 =
øãs
[
øãs_size
 - 1])

153 || (
r_up
 >
a5
 * 
m_bôøãE°im©e
))

155 
dñay
 = 
°d
::
max
(
b_t
 - 
èf
, 
b_›t
);

159 
	g√xtR©e
 = 
r_up
;

165 
NS_LOG_INFO
(

166 "√xtR©e: " << 
√xtR©e
 << "\tb_dñay: " << 
dñay
.
GëSec⁄ds
(Ë<< "\tb_t: " << 
b_t
.GëSec⁄ds(Ë<< "\tb_›t: " << 
b_›t
.GetSeconds());

169 
boﬁ


170 
	gAØshClõ¡
::
Buf„rInc
()

172 
Time
 
œ°
(
Sec⁄ds
(0));

174 
	g°d
::
m≠
<
Time
, 
	gTime
>::
ôî©‹
 
ô
 = 
m_buf„rSèã
.
begö
();

175 
	gô
 !
m_buf„rSèã
.
íd
(); it++)

180 i‡(
	gô
->
	g£c⁄d
 < 
	gœ°
)

182  
	gÁl£
;

184 
	gœ°
 = 
ô
->
£c⁄d
;

186  
	gåue
;

	@algorithms/aaash-client.h

8 #i‚de‡
AAASH_CLIENT_H_


9 
	#AAASH_CLIENT_H_


	)

11 
	~<ns3/dash-˛õ¡.h
>

12 
«me•a˚
 
	gns3


15 ˛as†
	cAØshClõ¡
 : 
public
 
DashClõ¡


17 
public
:

18 
Ty≥Id


19 
GëTy≥Id
();

21 
AØshClõ¡
();

23 
	gvútuÆ


24 ~
AØshClõ¡
();

26 
vútuÆ
 

27 
CÆcNextSegmít
(
uöt32_t
 
cuºR©e
, uöt32_à& 
√xtR©e
, 
Time
 & 
dñay
);

29 
	g¥iv©e
:

30 
boﬁ


31 
Buf„rInc
();

33 
boﬁ
 
	gm_ru¬ög_Á°_°¨t
;

	@algorithms/fdash-client.cc

8 
	~"fdash-˛õ¡.h
"

9 
	~<ns3/log.h
>

10 
	~<ns3/simuœt‹.h
>

11 
	~<ns3/dash-˛õ¡.h
>

13 
NS_LOG_COMPONENT_DEFINE
("FdashClient");

15 
«me•a˚
 
	gns3


17 
NS_OBJECT_ENSURE_REGISTERED
(
FdashClõ¡
);

19 
Ty≥Id


20 
	gFdashClõ¡
::
GëTy≥Id
()

22 
Ty≥Id
 
tid
 =

23 
Ty≥Id
("ns3::FdashClõ¡").
SëP¨ít
<
DashClõ¡
>().
AddC⁄°ru˘‹
<

24 
FdashClõ¡
>();

25  
	gtid
;

28 
	gFdashClõ¡
::
FdashClõ¡
()

34 
FdashClõ¡
::~FdashClient()

40 
FdashClõ¡
::
CÆcNextSegmít
(
uöt32_t
 
cuºR©e
, uöt32_à& 
√xtR©e
,

41 
Time
 & 
dñay
)

43 
	g¶ow
 = 0, 
	gok
 = 0, 
	gÁ°
 = 0, 
	gÁŒög
 = 0, 
	g°ódy
 = 0, 
	grisög
 = 0, 
	gr1
 =

44 0, 
	gr2
 = 0, 
	gr3
 = 0, 
	gr4
 = 0, 
	gr5
 = 0, 
	gr6
 = 0, 
	gr7
 = 0, 
	gr8
 = 0, 
	gr9
 = 0, 
	gp2
 =

45 0, 
	gp1
 = 0, 
	gz
 = 0, 
	gn1
 = 0, 
	gn2
 = 0, 
	gouçut
 = 0;

47 
	gt
 = 
m_èrgë_dt
.
GëSec⁄ds
();

49 
	gcuºDt
 = 
GëBuf„rE°im©e
();

50 
	gdiff
 = 
GëBuf„rDif„ª¡ül
();

52 i‡(
	gcuºDt
 < 2 * 
	gt
 / 3)

54 
	g¶ow
 = 1.0;

56 i‡(
	gcuºDt
 < 
	gt
)

58 
	g¶ow
 = 1 - 1 / (
t
 / 3Ë* (
cuºDt
 - 2 *Å / 3);

59 
	gok
 = 1 / (
t
 / 3Ë* (
cuºDt
 - 2 *Å / 3);

61 i‡(
	gcuºDt
 < 4 * 
	gt
)

63 
	gok
 = 1 - 1 / (3 * 
t
Ë* (
cuºDt
 -Å);

64 
	gÁ°
 = 1 / (3 * 
t
Ë* (
cuºDt
 -Å);

68 
	gÁ°
 = 1;

71 i‡(
	gdiff
 < -2 * 
	gt
 / 3)

73 
	gÁŒög
 = 1;

75 i‡(
	gdiff
 < 0)

77 
	gÁŒög
 = 1 - 1 / (2 * 
t
 / 3Ë* (
diff
 + 2 *Å / 3);

78 
	g°ódy
 = 1 / (2 * 
t
 / 3Ë* (
diff
 + 2 *Å / 3);

80 i‡(
	gdiff
 < 4 * 
	gt
)

82 
	g°ódy
 = 1 - 1 / (4 * 
t
Ë* 
diff
;

83 
	grisög
 = 1 / (4 * 
t
Ë* 
diff
;

87 
	grisög
 = 1;

90 
	gr1
 = 
°d
::
mö
(
¶ow
, 
ÁŒög
);

91 
	gr2
 = 
°d
::
mö
(
ok
, 
ÁŒög
);

92 
	gr3
 = 
°d
::
mö
(
Á°
, 
ÁŒög
);

93 
	gr4
 = 
°d
::
mö
(
¶ow
, 
°ódy
);

94 
	gr5
 = 
°d
::
mö
(
ok
, 
°ódy
);

95 
	gr6
 = 
°d
::
mö
(
Á°
, 
°ódy
);

96 
	gr7
 = 
°d
::
mö
(
¶ow
, 
risög
);

97 
	gr8
 = 
°d
::
mö
(
ok
, 
risög
);

98 
	gr9
 = 
°d
::
mö
(
Á°
, 
risög
);

100 
	gp2
 = 
°d
::
sqπ
(°d::
pow
(
r9
, 2));

101 
	gp1
 = 
°d
::
sqπ
(°d::
pow
(
r6
, 2Ë+ std::pow(
r8
, 2));

102 
	gz
 = 
°d
::
sqπ
(°d::
pow
(
r3
, 2Ë+ std::pow(
r5
, 2Ë+ std::pow(
r7
, 2));

103 
	gn1
 = 
°d
::
sqπ
(°d::
pow
(
r2
, 2Ë+ std::pow(
r4
, 2));

104 
	gn2
 = 
°d
::
sqπ
(°d::
pow
(
r1
, 2));

107 
	gouçut
 = (
n2
 * 0.25 + 
n1
 * 0.5 + 
z
 * 1 + 
p1
 * 2 + 
p2
 * 4)

108 / (
n2
 + 
n1
 + 
z
 + 
p1
 + 
p2
);

110 
NS_LOG_INFO
(

111 "cuºDt: " << 
cuºDt
 << " diff: " << 
diff
 << " slow: " << 
¶ow
 << " ok: " << 
ok
 << " fa°: " << 
Á°
 << " fÆlög: " << 
ÁŒög
 << " sãady: " << 
°ódy
 << "Ñisög: " << 
risög
 << "Ñ1: " << 
r1
 << "Ñ2: " << 
r2
 << "Ñ3: " << 
r3
 << "Ñ4: " << 
r4
 << "Ñ5: " << 
r5
 << "Ñ6: " << 
r6
 << "Ñ7: " << 
r7
 << "Ñ8: " << 
r8
 << "Ñ9: " << 
r9
 << "Ö2: " << 
p2
 << "Ö1: " << 
p1
 << " z: " << 
z
 << "Ç1: " << 
n1
 << "Ç2: " << 
n2
 << " ouçut: " << 
ouçut
);

113 
uöt32_t
 
	gªsu…
 = 0;

115 
	gªsu…
 = 
ouçut
 * 
m_bôøãE°im©e
;

117 
uöt32_t
 
	gøãs
[] =

124 
uöt32_t
 
	gøãs_size
 = (
øãs
) / (rates[0]);

126 
uöt32_t
 
	gi
;

128 
	g√xtR©e
 = 
øãs
[0];

130 
	gi
 = 0; i < 
	gøãs_size
; i++)

132 i‡(
	gªsu…
 > 
	gøãs
[
i
])

134 
	g√xtR©e
 = 
øãs
[
i
];

138 
	gdñay
 = 
Sec⁄ds
(0);

139 i‡(
	g√xtR©e
 > 
	gcuºR©e
)

153 
	gt_60
 = 
cuºDt
 + (
m_bôøãE°im©e
 / 
√xtR©e
 - 1) * 60;

155 i‡(
	gt_60
 < 
	gt
)

157 
	g√xtR©e
 = 
cuºR©e
;

158 
	gt_60
 = 
cuºDt
 + (
m_bôøãE°im©e
 / 
√xtR©e
 - 1) * 60;

160 i‡(
	gt_60
 > 
	gt
)

167 i‡(
	g√xtR©e
 < 
	gcuºR©e
)

169 
	gt_60
 = 
cuºDt
 + (
m_bôøãE°im©e
 / 
√xtR©e
 - 1) * 60;

171 i‡(
	gt_60
 > 
	gt
)

173 
	gt_60
 = 
cuºDt
 + (
m_bôøãE°im©e
 / 
cuºR©e
 - 1) * 60;

174 i‡(
	gt_60
 > 
	gt
)

176 
	g√xtR©e
 = 
cuºR©e
;

182 
NS_LOG_INFO
(
cuºR©e
 << " " << 
ouçut
 << " " << 
ªsu…
);

	@algorithms/fdash-client.h

8 #i‚de‡
FDASH_CLIENT_H_


9 
	#FDASH_CLIENT_H_


	)

11 
	~<ns3/dash-˛õ¡.h
>

12 
«me•a˚
 
	gns3


15 ˛as†
	cFdashClõ¡
 : 
public
 
DashClõ¡


17 
public
:

18 
Ty≥Id


19 
GëTy≥Id
();

21 
FdashClõ¡
();

23 
	gvútuÆ


24 ~
FdashClõ¡
();

26 
vútuÆ
 

27 
CÆcNextSegmít
(
uöt32_t
 
cuºR©e
, uöt32_à& 
√xtR©e
, 
Time
 & 
dñay
);

29 
	g¥iv©e
:

30 
boﬁ


31 
Buf„rInc
();

	@algorithms/osmp-client.cc

8 
	~"osmp-˛õ¡.h
"

9 
	~<ns3/log.h
>

10 
	~<ns3/simuœt‹.h
>

11 
	~<ns3/dash-˛õ¡.h
>

13 
NS_LOG_COMPONENT_DEFINE
("OsmpClient");

15 
«me•a˚
 
	gns3


17 
NS_OBJECT_ENSURE_REGISTERED
(
OsmpClõ¡
);

19 
Ty≥Id


20 
	gOsmpClõ¡
::
GëTy≥Id
()

22 
Ty≥Id
 
tid
 =

23 
Ty≥Id
("ns3::OsmpClõ¡").
SëP¨ít
<
DashClõ¡
>().
AddC⁄°ru˘‹
<

24 
OsmpClõ¡
>();

25  
	gtid
;

28 
	gOsmpClõ¡
::
OsmpClõ¡
()

34 
OsmpClõ¡
::~OsmpClient()

40 
OsmpClõ¡
::
CÆcNextSegmít
(
uöt32_t
 
cuºR©e
, uöt32_à& 
√xtR©e
,

41 
Time
 & 
dñay
)

43 
uöt32_t
 
	gøãs
[] =

48 
uöt32_t
 
	gøãs_size
 = (
øãs
) / (rates[0]);

50 
	g°d
::
m≠
<
Time
, 
	gTime
>::
ôî©‹
 
ô
;

51 
	gô
 = 
m_buf„rSèã
.
íd
();

53 
	gô
--;

54 
Time
 
	gnow
 = 
ô
->
fú°
;

56 i‡(
	gô
 !
m_buf„rSèã
.
begö
())

58 
ô
--;

62 
Time
 
	gt_œ°_‰ag
 = 
now
 - 
ô
->
fú°
;

65 
	gl_cur
 = 0;

66 
	gøãs
[
l_cur
] !
cuºR©e
)

68 
l_cur
++;

71 
	gl_nxt
 = 0;

72 
	gl_mö
 = 0;

73 
	gl_max
 = 
øãs_size
 - 1;

75 
	gr_dow∆ﬂd
 = 100;

76 i‡(
	gt_œ°_‰ag
.
GëMûliSec⁄ds
() > 0)

78 
	gr_dow∆ﬂd
 = (1.0 * 
MPEG_FRAMES_PER_SEGMENT
 * 
MPEG_TIME_BETWEEN_FRAMES
)

79 / 
t_œ°_‰ag
.
GëMûliSec⁄ds
();

85 i‡(
	gr_dow∆ﬂd
 < 1)

87 i‡(
	gl_cur
 > 
	gl_mö
)

89 i‡(
	gr_dow∆ﬂd
 < ((1.0 * 
	gøãs
[
l_cur
 - 1]) /Ñates[l_cur]))

91 
	gl_nxt
 = 
l_mö
;

95 
	gl_nxt
 = 
l_cur
 - 1;

101 i‡(
	gl_cur
 < 
	gl_max
)

103 i‡(
	gl_cur
 == 0

104 || 
r_dow∆ﬂd
 > ((1.0 * 
øãs
[
l_cur
 - 1]) /Ñates[l_cur]))

108 
l_nxt
 =Ü_nxt + 1;

110 !(
	gl_nxt
 =
l_max


111 || 
r_dow∆ﬂd
 < ((1.0 * 
øãs
[
l_nxt
 + 1]Ë/Ñ©es[
l_cur
])));

117 
	gdñay
 = 
Sec⁄ds
(0);

118 
	g√xtR©e
 = 
øãs
[
l_nxt
];

	@algorithms/osmp-client.h

8 #i‚de‡
OSMP_CLIENT_H_


9 
	#OSMP_CLIENT_H_


	)

11 
	~<ns3/dash-˛õ¡.h
>

12 
«me•a˚
 
	gns3


15 ˛as†
	cOsmpClõ¡
 : 
public
 
DashClõ¡


17 
public
:

18 
Ty≥Id


19 
GëTy≥Id
();

21 
OsmpClõ¡
();

23 
	gvútuÆ


24 ~
OsmpClõ¡
();

26 
vútuÆ
 

27 
CÆcNextSegmít
(
uöt32_t
 
cuºR©e
, uöt32_à& 
√xtR©e
, 
Time
 & 
dñay
);

	@algorithms/raahs-client.cc

8 
	~"øahs-˛õ¡.h
"

9 
	~<ns3/log.h
>

10 
	~<ns3/simuœt‹.h
>

11 
	~<ns3/dash-˛õ¡.h
>

13 
NS_LOG_COMPONENT_DEFINE
("RaahsClient");

15 
«me•a˚
 
	gns3


17 
NS_OBJECT_ENSURE_REGISTERED
(
RØhsClõ¡
);

19 
Ty≥Id


20 
	gRØhsClõ¡
::
GëTy≥Id
()

22 
Ty≥Id
 
tid
 =

23 
Ty≥Id
("ns3::RØhsClõ¡").
SëP¨ít
<
DashClõ¡
>().
AddC⁄°ru˘‹
<

24 
RØhsClõ¡
>();

25  
	gtid
;

28 
	gRØhsClõ¡
::
RØhsClõ¡
()

34 
RØhsClõ¡
::~RaahsClient()

40 
RØhsClõ¡
::
CÆcNextSegmít
(
uöt32_t
 
cuºR©e
, uöt32_à& 
√xtR©e
,

41 
Time
 & 
dñay
)

43 
uöt32_t
 
	gøãs
[] =

50 
uöt32_t
 
	gøãs_size
 = (
øãs
) / (rates[0]);

53 
	gmsd
 = 
MPEG_FRAMES_PER_SEGMENT
 * 
MPEG_TIME_BETWEEN_FRAMES
 / 1000.0;

54 
	gs·
 = 
GëSegmítFëchTime
();

56 
	gmi
 = 
msd
 / 
s·
;

58 
	gt_mö
 = 9;

60 
	gïsû⁄
 = 0.0;

61 
uöt32_t
 
	gi
;

62 
	gi
 = 0; i < 
	gøãs_size
 - 1; i++)

64 
	gïsû⁄
 = 
°d
::
max
(
ïsû⁄
, (1.0 * 
øãs
[
i
 + 1] -Ñates[i]) /Ñates[i]);

67 
	ggamma_d
 = 0.67;

69 
	gøãInd
 = 
øãs_size
;

70 
uöt32_t
 
	gi
 = 0; i < 
	gøãs_size
; i++)

72 i‡(
	gøãs
[
i
] =
cuºR©e
)

74 
øãInd
 = 
i
;

78 i‡(
	gøãInd
 =
øãs_size
)

80 
NS_FATAL_ERROR
("WrongÑate");

83 i‡(
	gmi
 > 1 + 
	gïsû⁄
)

85 i‡(
	gøãInd
 < 
	gøãs_size
 - 1)

87 
	g√xtR©e
 = 
øãs
[()
øãInd
 + 1];

90 i‡(
	gmi
 < 
	ggamma_d
)

92 
	gi
 = 
øãInd
 - 1;

93 
	gi
 = 0; i < 
	gøãInd
 - 1; i--)

95 i‡(
	gøãs
[
i
] < 
mi
 * 
	gcuºR©e
)

97 
	g√xtR©e
 = 
øãs
[
i
];

107 
	gts
 = 
GëBuf„rE°im©e
(Ë- 
t_mö
 - 
cuºR©e
 * 
msd
 / 
øãs
[0];

109 i‡(
	gts
 > 0)

111 
	gdñay
 = 
Sec⁄ds
(
ts
);

115 
	gdñay
 = 
Sec⁄ds
(0);

	@algorithms/raahs-client.h

8 #i‚de‡
RAAHS_CLIENT_H_


9 
	#RAAHS_CLIENT_H_


	)

11 
	~<ns3/dash-˛õ¡.h
>

12 
«me•a˚
 
	gns3


15 ˛as†
	cRØhsClõ¡
 : 
public
 
DashClõ¡


17 
public
:

18 
Ty≥Id


19 
GëTy≥Id
();

21 
RØhsClõ¡
();

23 
	gvútuÆ


24 ~
RØhsClõ¡
();

26 
vútuÆ
 

27 
CÆcNextSegmít
(
uöt32_t
 
cuºR©e
, uöt32_à& 
√xtR©e
, 
Time
 & 
dñay
);

29 
	g¥iv©e
:

	@algorithms/sftm-client.cc

8 
	~"s·m-˛õ¡.h
"

9 
	~<ns3/log.h
>

10 
	~<ns3/simuœt‹.h
>

11 
	~<ns3/dash-˛õ¡.h
>

13 
NS_LOG_COMPONENT_DEFINE
("SftmClient");

15 
«me•a˚
 
	gns3


17 
NS_OBJECT_ENSURE_REGISTERED
(
S·mClõ¡
);

19 
Ty≥Id


20 
	gS·mClõ¡
::
GëTy≥Id
()

22 
Ty≥Id
 
tid
 =

23 
Ty≥Id
("ns3::S·mClõ¡").
SëP¨ít
<
DashClõ¡
>().
AddC⁄°ru˘‹
<

24 
S·mClõ¡
>();

25  
	gtid
;

28 
	gS·mClõ¡
::
S·mClõ¡
() :

29 
m_rs·_ex˚eded
(
Ál£
)

35 
S·mClõ¡
::~SftmClient()

41 
S·mClõ¡
::
CÆcNextSegmít
(
uöt32_t
 
cuºR©e
, uöt32_à& 
√xtR©e
,

42 
Time
 & 
dñay
)

44 
uöt32_t
 
	gøãs
[] =

51 
uöt32_t
 
	gøãs_size
 = (
øãs
) / (rates[0]);

54 
	gmsd
 = 
MPEG_FRAMES_PER_SEGMENT
 * 
MPEG_TIME_BETWEEN_FRAMES
 / 1000.0;

55 
	gs·
 = 
GëSegmítFëchTime
();

56 
	gtbmt
 = 
m_èrgë_dt
.
GëSec⁄ds
();

57 
	gts_ns
 = 
m_£gmítId
 * 
msd
;

58 
	gts_o
 = 
GëPœyî
().
m_‰amesPœyed
 * 
MPEG_TIME_BETWEEN_FRAMES


60 
	grs·
 = 
ts_ns
 - 
ts_o
 - 
tbmt
;

61 
	grho
 = 0.75;

63 
	grs·_s
 = 
rho
 * 
msd
;

64 i‡(
	grs·
 < 
	grs·_s
 && !
	gm_rs·_ex˚eded
)

66 
	grs·
 = 
rs·_s
;

70 
	gm_rs·_ex˚eded
 = 
åue
;

73 
	gs·m
 = 
°d
::
mö
(
msd
, 
rs·
Ë/ 
	gs·
;

75 
uöt32_t
 
	gøãInd
 = 
øãs_size
;

76 
uöt32_t
 
	gi
 = 0; i < 
	gøãs_size
; i++)

78 i‡(
	gøãs
[
i
] =
cuºR©e
)

80 
øãInd
 = 
i
;

84 i‡(
	gøãInd
 =
øãs_size
)

86 
NS_FATAL_ERROR
("WrongÑate");

89 
	gec_u
 =

90 
øãInd
 < 
øãs_size
 - 1 ?

91 (1.0 * 
øãs
[
øãInd
 + 1] -Ñates[rateInd]) /Ñates[rateInd] :

92 
°d
::
numîic_limôs
<>::
max
();

94 
	gemax_u
 = 0;

95 
uöt32_t
 
	gi
 = 0; i < 
	gøãs_size
 - 1; i++)

97 
	ge
 = (1.0 * 
øãs
[
i
 + 1] -Ñates[i]) /Ñates[i];

98 
	gemax_u
 = 
°d
::
max
(
emax_u
, 
e
);

101 
	ge_u
 = 
°d
::
mö
(
emax_u
, 2 * 
ec_u
);

103 
	gec_d
 =

104 
øãInd
 > 0 ?

105 (1.0 * 
øãs
[
øãInd
] -Ñates[rateInd - 1]) /Ñates[rateInd] : 1.0;

107 
	gemö_d
 = 
°d
::
numîic_limôs
<>::
max
();

108 
uöt32_t
 
	gi
 = 1; i < 
	gøãs_size
; i++)

110 
	ge
 = (1.0 * 
øãs
[
i
] -Ñates[i - 1]) /Ñates[i];

111 
	gemö_d
 = 
°d
::
mö
(
emö_d
, 
e
);

114 
	ge_d
 = 
°d
::
max
(2 * 
emö_d
, 
ec_d
);

116 i‡(
	gs·m
 > 1 + 
	ge_u
 && 
	gøãInd
 < 
	gøãs_size
 - 1)

118 
	g√xtR©e
 = 
øãs
[
øãInd
 + 1];

120 i‡(
	gs·m
 < 1 - 
	ge_d
 && 
	gøãInd
 != 0)

122 
uöt32_t
 
i
 = 0; 
	gi
 < 
	gøãInd
; i++)

124 i‡(
	gøãs
[
i
] >
s·m
 * 
øãs
[
øãInd
])

128 
	g√xtR©e
 = 
øãs
[
i
];

132 
	gbmt_mö
 = 0;

133 
	gbmt_c
 = 
GëBuf„rE°im©e
();

134 
	gb_max
 = 
øãs
[
øãs_size
 - 1];

135 
	gb_mö
 = 
øãs
[0];

136 
	gt_id
 = 
bmt_c
 - 
bmt_mö
 - 
msd
 * 
b_max
 / 
b_mö
;

138 i‡(
	gt_id
 > 0)

140 
	gdñay
 = 
Sec⁄ds
(
t_id
);

144 
	gdñay
 = 
Sec⁄ds
(0);

	@algorithms/sftm-client.h

8 #i‚de‡
SFTM_CLIENT_H_


9 
	#SFTM_CLIENT_H_


	)

11 
	~<ns3/dash-˛õ¡.h
>

12 
«me•a˚
 
	gns3


15 ˛as†
	cS·mClõ¡
 : 
public
 
DashClõ¡


17 
public
:

18 
Ty≥Id


19 
GëTy≥Id
();

21 
S·mClõ¡
();

23 
	gvútuÆ


24 ~
S·mClõ¡
();

26 
vútuÆ
 

27 
CÆcNextSegmít
(
uöt32_t
 
cuºR©e
, uöt32_à& 
√xtR©e
, 
Time
 & 
dñay
);

29 
	g¥iv©e
:

30 
boﬁ
 
m_rs·_ex˚eded
;

	@algorithms/svaa-client.cc

8 
	~"svØ-˛õ¡.h
"

9 
	~<ns3/log.h
>

10 
	~<ns3/simuœt‹.h
>

11 
	~<ns3/dash-˛õ¡.h
>

13 
NS_LOG_COMPONENT_DEFINE
("SvaaClient");

15 
«me•a˚
 
	gns3


17 
NS_OBJECT_ENSURE_REGISTERED
(
SvØClõ¡
);

19 
Ty≥Id


20 
	gSvØClõ¡
::
GëTy≥Id
()

22 
Ty≥Id
 
tid
 =

23 
Ty≥Id
("ns3::SvØClõ¡").
SëP¨ít
<
DashClõ¡
>().
AddC⁄°ru˘‹
<

24 
SvØClõ¡
>();

25  
	gtid
;

28 
	gSvØClõ¡
::
SvØClõ¡
() :

29 
m_m_k_1
(0), 
m_m_k_2
(0), 
m_cou¡î
(0)

35 
	gSvØClõ¡
::~
SvØClõ¡
()

41 
SvØClõ¡
::
CÆcNextSegmít
(
uöt32_t
 
cuºR©e
, uöt32_à& 
√xtR©e
,

42 
Time
 & 
dñay
)

44 
uöt32_t
 
	gøãs
[] =

49 
uöt32_t
 
	gøãs_size
 = (
øãs
) / (rates[0]);

50 
	gdiff
 = 
GëBuf„rDif„ª¡ül
();

52 
	gq_tk
 = 
GëBuf„rE°im©e
();

53 
	gq_ªf
 = 
m_èrgë_dt
.
GëSec⁄ds
();

54 
	gp
 = 1.0;

55 
	gf_q
 = 2 * 
°d
::
exp
(
p
 * (
q_tk
 - 
q_ªf
))

56 / (1 + 
°d
::
exp
(
p
 * (
q_tk
 - 
q_ªf
)));

57 
	gdñè
 = 
MPEG_TIME_BETWEEN_FRAMES
 * 
MPEG_FRAMES_PER_SEGMENT
 / 1000.0;

58 
	gf_t
 = 
dñè
 / (dñè - 
diff
);

59 
	gf_u
 = 1;

61 
	gf
 = 
f_q
 * 
f_t
 * 
f_u
;

63 
	gt_k
 = 
m_bôøãE°im©e
;

65 
	gu_k
 = 
f
 * 
t_k
;

67 
	gm_k
 = 0;

68 i‡(
	gdiff
 >0.4 * 
dñè
)

70 
m_k
 = 1;

72 i‡(
	gdiff
 >0.2 * 
dñè
)

74 
m_k
 = 5;

76 i‡(
	gdiff
 >= 0)

78 
m_k
 = 15;

82 
	gm_k
 = 20;

85 
	gm
 = (
m_k
 + 
m_m_k_1
 + 
m_m_k_2
) / 3;

86 
	gm_m_k_2
 = 
m_m_k_1
;

87 
	gm_m_k_1
 = 
m_k
;

89 i‡(
	gq_tk
 < 
	gq_ªf
 / 2)

91 
	gi
 = 
øãs_size
 - 1;

92 
	gøãs
[
i
] > 
	gt_k
 && 
	gi
 > 0)

94 
	gi
--;

96 
	g√xtR©e
 = 
øãs
[
i
];

97 
	gdñay
 = 
Sec⁄ds
(0);

100 i‡(
	gu_k
 > 
	gcuºR©e
)

102 
	gm_cou¡î
++;

103 i‡(
	gm_cou¡î
 > 
	gm
)

105 
	gi
 = 
øãs_size
 - 1;

106 
	gøãs
[
i
] > 
	gt_k
 && 
	gi
 > 0)

108 
	gi
--;

110 
	g√xtR©e
 = 
øãs
[
i
];

111 
	gdñay
 = 
Sec⁄ds
(0);

112 
	gm_cou¡î
 = 0;

116 i‡(
	gu_k
 < 
	gcuºR©e
)

118 
	gm_cou¡î
 = 0;

120 
	g√xtR©e
 = 
cuºR©e
;

121 
	gdñay
 = 
Sec⁄ds
(0);

	@algorithms/svaa-client.h

8 #i‚de‡
SVAA_CLIENT_H_


9 
	#SVAA_CLIENT_H_


	)

11 
	~<ns3/dash-˛õ¡.h
>

12 
«me•a˚
 
	gns3


15 ˛as†
	cSvØClõ¡
 : 
public
 
DashClõ¡


17 
public
:

18 
Ty≥Id


19 
GëTy≥Id
();

21 
SvØClõ¡
();

23 
	gvútuÆ


24 ~
SvØClõ¡
();

26 
vútuÆ
 

27 
CÆcNextSegmít
(
uöt32_t
 
cuºR©e
, uöt32_à& 
√xtR©e
, 
Time
 & 
dñay
);

29 
	g¥iv©e
:

30 
m_m_k_1
;

31 
	gm_m_k_2
;

32 
	gm_cou¡î
;

	@dash-client.cc

21 
	~<ns3/log.h
>

22 
	~<ns3/uöãgî.h
>

23 
	~<ns3/t˝-sockë-Á˘‹y.h
>

24 
	~<ns3/simuœt‹.h
>

25 
	~<ns3/öë-sockë-addªss.h
>

26 
	~<ns3/öë6-sockë-addªss.h
>

27 
	~"hâp-hódî.h
"

28 
	~"dash-˛õ¡.h
"

29 
	~"∑ø.h
"

31 
NS_LOG_COMPONENT_DEFINE
("DashClient");

32 
usög
 
«me•a˚
 
	g°d
;

34 
	gve˘‹
 <> 
	gvideo_num
;

36 
«me•a˚
 
	gns3


39 
NS_OBJECT_ENSURE_REGISTERED
(
DashClõ¡
);

41 
	gDashClõ¡
::
m_cou¡Objs
 = 0;

43 
Ty≥Id


44 
	gDashClõ¡
::
GëTy≥Id
()

46 
Ty≥Id
 
tid
 =

47 
Ty≥Id
("ns3::DashClõ¡").
SëP¨ít
<
Aµliˇti⁄
>().
AddC⁄°ru˘‹
<

48 
DashClõ¡
>().
AddAâribuã
("VideoId",

49 "ThêId o‡thêvideÿth© i†∂ayed.", 
UöãgîVÆue
(0),

50 
MakeUöãgîAc˚ss‹
(&
DashClõ¡
::
m_videoId
),

51 
MakeUöãgîCheckî
<
uöt32_t
>(1)).
AddAâribuã
("Remote",

52 "Thêaddªs†o‡thêde°ö©i⁄", 
AddªssVÆue
(),

53 
MakeAddªssAc˚ss‹
(&
DashClõ¡
::
m_≥î
), 
MakeAddªssCheckî
()).
AddAâribuã
(

55 
Ty≥IdVÆue
(
T˝SockëFa˘‹y
::
GëTy≥Id
()),

56 
MakeTy≥IdAc˚ss‹
(&
DashClõ¡
::
m_tid
), 
MakeTy≥IdCheckî
()).
AddAâribuã
(

57 "T¨gëDt", "Thêèrgë buf„rögÅime", 
TimeVÆue
(
Time
("35s")),

58 
MakeTimeAc˚ss‹
(&
DashClõ¡
::
m_èrgë_dt
), 
MakeTimeCheckî
()).
AddAâribuã
(

60 
TimeVÆue
(
Time
("10s")), 
MakeTimeAc˚ss‹
(&
DashClõ¡
::
m_wödow
),

61 
MakeTimeCheckî
()

63 ).
AddTø˚Sour˚
("Tx", "AÇewÖacket is createdánd is sent",

64 
MakeTø˚Sour˚Ac˚ss‹
(&
DashClõ¡
::
m_txTø˚
));

65  
	gtid
;

68 
	gDashClõ¡
::
DashClõ¡
() :

69 
m_øãCh™ges
(0), 
m_èrgë_dt
("35s"), 
m_bôøãE°im©e
(0.0), 
m_£gmítId
(

70 0), 
m_sockë
(0), 
m_c⁄√˘ed
(
Ál£
), 
m_tŸByãs
(0), 
m_°¨ãdRe˚ivög
(

71 
Sec⁄ds
(0)), 
m_sumDt
(Sec⁄ds(0)), 
m_œ°Dt
(Sec⁄ds(-1)), 
m_id
(

72 
m_cou¡Objs
++), 
m_ªque°Time
("0s"), 
m_£gmít_byãs
(0), 
m_bôR©e
(

73 50000), 
m_wödow
(
Sec⁄ds
(10)), 
m_£gmítFëchTime
(Seconds(0))

75 
NS_LOG_FUNCTION
(
this
);

76 
	gm_∑r£r
.
SëAµ
(
this
);

79 
	gDashClõ¡
::~
DashClõ¡
()

81 
NS_LOG_FUNCTION
(
this
);

84 
	gPå
<
	gSockë
>

85 
	gDashClõ¡
::
GëSockë
() const

87 
NS_LOG_FUNCTION
(
this
);

88  
	gm_sockë
;

92 
	gDashClõ¡
::
DoDi•o£
()

94 
NS_LOG_FUNCTION
(
this
);

96 
	gm_sockë
 = 0;

98 
	gAµliˇti⁄
::
DoDi•o£
();

103 
	gDashClõ¡
::
SèπAµliˇti⁄
()

105 
NS_LOG_FUNCTION
(
this
);

109 i‡(!
	gm_sockë
)

111 
	gm_sockë
 = 
Sockë
::
Cª©eSockë
(
GëNode
(), 
m_tid
);

114 i‡(
	gm_sockë
->
GëSockëTy≥
(Ë!
Sockë
::
NS3_SOCK_STREAM


115 && 
m_sockë
->
GëSockëTy≥
(Ë!
Sockë
::
NS3_SOCK_SEQPACKET
)

117 
NS_FATAL_ERROR
("Using HTTP withán incompatible socketÅype. "

122 i‡(
	gI√t6SockëAddªss
::
IsM©chögTy≥
(
m_≥î
))

124 
m_sockë
->
Böd6
();

126 i‡(
	gI√tSockëAddªss
::
IsM©chögTy≥
(
m_≥î
))

128 
m_sockë
->
Böd
();

131 
	gm_sockë
->
C⁄√˘
(
m_≥î
);

132 
	gm_sockë
->
SëRecvCÆlback
(
MakeCÆlback
(&
DashClõ¡
::
H™dÀRód
, 
this
));

133 
	gm_sockë
->
SëC⁄√˘CÆlback
(

134 
MakeCÆlback
(&
DashClõ¡
::
C⁄√˘i⁄Suc˚eded
, 
this
),

135 
MakeCÆlback
(&
DashClõ¡
::
C⁄√˘i⁄Faûed
, 
this
));

136 
	gm_sockë
->
SëSídCÆlback
(
MakeCÆlback
(&
DashClõ¡
::
D©aSíd
, 
this
));

141 
	gDashClõ¡
::
St›Aµliˇti⁄
()

143 
NS_LOG_FUNCTION
(
this
);

145 i‡(
	gm_sockë
 != 0)

147 
m_sockë
->
Clo£
();

148 
	gm_c⁄√˘ed
 = 
Ál£
;

149 
	gm_∂ayî
.
	gm_°©e
 = 
MPEG_PLAYER_DONE
;

153 
NS_LOG_WARN
("DashClient foundÇull socketÅo close in StopApplication");

159 
	gDashClõ¡
::
Reque°Segmít
()

161 
NS_LOG_FUNCTION
(
this
);

163 i‡(
	gm_c⁄√˘ed
 =
Ál£
)

168 
	gPå
<
	gPackë
> 
	g∑ckë
 = 
Cª©e
<
Packë
>(100);

170 
HTTPHódî
 
	ghâpHódî
;

171 
	ghâpHódî
.
SëSeq
(1);

172 
	ghâpHódî
.
SëMesßgeTy≥
(
HTTP_REQUEST
);

173 
	ghâpHódî
.
SëVideoId
(
m_videoId
);

174 
	ghâpHódî
.
SëResﬁuti⁄
(
m_bôR©e
);

175 
	ghâpHódî
.
SëSegmítId
(
m_£gmítId
++);

176 
	g∑ckë
->
AddHódî
(
hâpHódî
);

179 
	gªs
 = 0;

180 i‡(((Ë(
	gªs
 = 
m_sockë
->
Síd
(
∑ckë
))Ë!∑ckë->
GëSize
())

182 
NS_FATAL_ERROR
(

183 "Oh oh. Couldn'à£ndÖackë!Ñes=" << 
ªs
 << " size=" << 
∑ckë
->
GëSize
());

186 
	gm_ªque°Time
 = 
Simuœt‹
::
Now
();

187 
	gm_£gmít_byãs
 = 0;

192 
	gDashClõ¡
::
H™dÀRód
(
På
<
Sockë
> 
sockë
)

194 
NS_LOG_FUNCTION
(
this
 << 
sockë
);

196 
	gm_∑r£r
.
RódSockë
(
sockë
);

201 
	gDashClõ¡
::
C⁄√˘i⁄Suc˚eded
(
På
<
Sockë
> 
sockë
)

203 
NS_LOG_FUNCTION
(
this
 << 
sockë
);

204 
NS_LOG_LOGIC
("DashClient Connection succeeded");

205 
	gm_c⁄√˘ed
 = 
åue
;

206 
Reque°Segmít
();

210 
	gDashClõ¡
::
C⁄√˘i⁄Faûed
(
På
<
Sockë
> 
sockë
)

212 
NS_LOG_FUNCTION
(
this
 << 
sockë
);
NS_LOG_LOGIC
(

217 
	gDashClõ¡
::
D©aSíd
(
På
<
Sockë
>, 
uöt32_t
)

219 
NS_LOG_FUNCTION
(
this
);

221 i‡(
	gm_c⁄√˘ed
)

224 
NS_LOG_INFO
("Something was sent");

229 
NS_LOG_INFO
("NOT CONNECTED!!!!");

234 
	gDashClõ¡
::
MesßgeRe˚ived
(
Packë
 
mesßge
)

236 
NS_LOG_FUNCTION
(
this
 << 
mesßge
);

238 
MPEGHódî
 
	gm≥gHódî
;

239 
HTTPHódî
 
	ghâpHódî
;

242 
	gm_∂ayî
.
Re˚iveFøme
(&
mesßge
);

243 
	gm_£gmít_byãs
 +
mesßge
.
GëSize
();

244 
	gm_tŸByãs
 +
mesßge
.
GëSize
();

248 
	gmesßge
.
RemoveHódî
(
m≥gHódî
);

249 
	gmesßge
.
RemoveHódî
(
hâpHódî
);

252 
	gm_∂ayî
.
	gm_°©e
)

254 
	gMPEG_PLAYER_PLAYING
:

255 
m_sumDt
 +
m_∂ayî
.
GëRólPœyTime
(
m≥gHódî
.
GëPœybackTime
());

257 
	gMPEG_PLAYER_PAUSED
:

259 
	gMPEG_PLAYER_DONE
:

262 
NS_FATAL_ERROR
("WRONG STATE");

265 i‡(
	gm≥gHódî
.
GëFømeId
(Ë=
MPEG_FRAMES_PER_SEGMENT
 - 1)

270 
m_£gmítFëchTime
 = 
Simuœt‹
::
Now
(Ë- 
m_ªque°Time
;

272 
NS_LOG_INFO
(

273 
Simuœt‹
::
Now
().
GëSec⁄ds
(Ë<< " byãs: " << 
m_£gmít_byãs
 << " segmítTime: " << 
m_£gmítFëchTime
.GetSeconds() << " segmentRate: " << 8 * m_segment_bytes / m_segmentFetchTime.GetSeconds());

275 
AddBôR©e
(
Simuœt‹
::
Now
(),

276 8 * 
m_£gmít_byãs
 / 
m_£gmítFëchTime
.
GëSec⁄ds
());

278 
Time
 
	gcuºDt
 = 
m_∂ayî
.
GëRólPœyTime
(
m≥gHódî
.
GëPœybackTime
());

280 
LogBuf„rLevñ
(
cuºDt
);

282 
uöt32_t
 
	gﬁd
 = 
m_bôR©e
;

285 
Time
 
	gbuf„rDñay
;

290 
uöt32_t
 
	g¥evBôøã
 = 
m_bôR©e
;

299 
	gDashClõ¡
::
CÆcNextSegmít
(
¥evBôøã
, 
m_bôR©e
, 
buf„rDñay
);

301 i‡(
	g¥evBôøã
 !
m_bôR©e
)

303 
m_øãCh™ges
++;

306 i‡(
	gbuf„rDñay
 =
Sec⁄ds
(0))

308 
Reque°Segmít
();

312 
	gm_∂ayî
.
SchduÀBuf„rWakeup
(
buf„rDñay
, 
this
);

327 i‡(
	gm_£gmítId
==70084Ë
DashClõ¡
::
St›Aµliˇti⁄
();

338 
NS_LOG_INFO
(

339 "===La° fømêª˚ived. Reque°ög segmíà" << 
m_£gmítId
);

342 
NS_LOG_INFO
(

343 "!@#$#@!$@#\t" << 
Simuœt‹
::
Now
().
GëSec⁄ds
(Ë<< " old: " << 
ﬁd
 << "Çew: " << 
m_bôR©e
 << "Å: " << 
cuºDt
.GëSec⁄ds(Ë<< " dt: " << (cuºDà- 
m_œ°Dt
).GetSeconds());

345 
	gm_œ°Dt
 = 
cuºDt
;

352 
	gDashClõ¡
::
CÆcNextSegmít
(
uöt32_t
 
cuºR©e
, uöt32_à& 
√xtR©e
,

353 
Time
 & 
dñay
)

361 
	g√xtR©e
 = 
cuºR©e
;

362 
	gdñay
 = 
Sec⁄ds
(0);

366 
	gDashClõ¡
::
GëSèts
()

368 
°d
::
cout
 << " InterruptionTime: "

369 << 
m_∂ayî
.
m_öãºu±i⁄_time
.
GëSec⁄ds
() << " interruptions: "

370 << 
m_∂ayî
.
m_öãºru±i⁄s
 << "ávgRate: "

371 << (1.0 * 
m_∂ayî
.
m_tŸÆR©e
Ë/ m_∂ayî.
m_‰amesPœyed


372 << " möR©e: " << 
m_∂ayî
.
m_möR©e
 << " AvgDt: "

373 << 
m_sumDt
.
GëSec⁄ds
(Ë/ 
m_∂ayî
.
m_‰amesPœyed
 << " changes: "

374 << 
m_øãCh™ges
 << 
°d
::
ídl
;

379 
	gDashClõ¡
::
LogBuf„rLevñ
(
Time
 
t
)

381 
m_buf„rSèã
[
Simuœt‹
::
Now
()] = 
t
;

382 
	g°d
::
m≠
<
Time
, 
	gTime
>::
ôî©‹
 
ô
 = 
m_buf„rSèã
.
begö
();

383 
	gô
 !
m_buf„rSèã
.
íd
(); ++it)

385 i‡(
	gô
->
	gfú°
 < (
	gSimuœt‹
::
Now
(Ë- 
m_wödow
))

387 
m_buf„rSèã
.
îa£
(
ô
->
fú°
);

393 
	gDashClõ¡
::
GëBuf„rE°im©e
()

395 
sum
 = 0;

396 
	gcou¡
 = 0;

397 
	g°d
::
m≠
<
Time
, 
	gTime
>::
ôî©‹
 
ô
 = 
m_buf„rSèã
.
begö
();

398 
	gô
 !
m_buf„rSèã
.
íd
(); ++it)

400 
	gsum
 +
ô
->
£c⁄d
.
GëSec⁄ds
();

401 
	gcou¡
++;

403  
	gsum
 / 
	gcou¡
;

407 
	gDashClõ¡
::
GëBuf„rDif„ª¡ül
()

409 
°d
::
m≠
<
Time
, 
	gTime
>::
ôî©‹
 
ô
 = 
m_buf„rSèã
.
íd
();

411 i‡(
	gô
 =
m_buf„rSèã
.
begö
())

416 
	gô
--;

417 
Time
 
	gœ°
 = 
ô
->
£c⁄d
;

419 i‡(
	gô
 =
m_buf„rSèã
.
begö
())

424 
	gô
--;

425 
Time
 
	g¥ev
 = 
ô
->
£c⁄d
;

426  (
	gœ°
 - 
	g¥ev
).
GëSec⁄ds
();

430 
	gDashClõ¡
::
GëSegmítFëchTime
()

432  
m_£gmítFëchTime
.
GëSec⁄ds
();

436 
	gDashClõ¡
::
AddBôR©e
(
Time
 
time
, 
bôøã
)

438 
	gm_bôøãs
[
time
] = 
bôøã
;

439 
	gsum
 = 0;

440 
	gcou¡
 = 0;

441 
	g°d
::
m≠
<
Time
, >::
ôî©‹
 
ô
 = 
m_bôøãs
.
begö
();

442 
	gô
 !
m_bôøãs
.
íd
(); ++it)

444 i‡(
	gô
->
	gfú°
 < (
	gSimuœt‹
::
Now
(Ë- 
m_wödow
))

446 
m_bôøãs
.
îa£
(
ô
->
fú°
);

450 
	gsum
 +
ô
->
£c⁄d
;

451 
	gcou¡
++;

454 
	gm_bôøãE°im©e
 = 
sum
 / 
cou¡
;

	@dash-client.h

21 #i‚de‡
DASH_CLIENT_H


22 
	#DASH_CLIENT_H


	)

24 
	~"ns3/≠∂iˇti⁄.h
"

25 
	~"ns3/±r.h
"

26 
	~"ns3/sockë.h
"

27 
	~"m≥g-∂ayî.h
"

28 
	~"ns3/åa˚d-ˇŒback.h
"

29 
	~"hâp-∑r£r.h
"

32 
«me•a˚
 
	gns3


60 ˛as†
	cDashClõ¡
 : 
public
 
Aµliˇti⁄


62 
‰õnd
 
˛ass
 
M≥gPœyî
;

63 
‰õnd
 
˛ass
 
	gHâpP¨£r
;

64 
	gpublic
:

65 
Ty≥Id


66 
GëTy≥Id
();

68 
DashClõ¡
();

70 
	gvútuÆ


71 ~
DashClõ¡
();

76 
	gPå
<
	gSockë
>

77 
GëSockë
() const;

83 
GëSèts
();

90 
ölöe
 
	gM≥gPœyî
 &

91 
GëPœyî
()

93  
	gm_∂ayî
;

96 
	g¥Ÿe˘ed
:

97 
vútuÆ
 

98 
DoDi•o£
();

100 
ölöe


101 
GëBôR©eE°im©e
()

103  
	gm_bôøãE°im©e
;

106 
GëBuf„rDif„ª¡ül
();

109 
AddBôR©e
(
Time
 
time
, 
bôøã
);

112 
GëBuf„rE°im©e
();

115 
GëSegmítFëchTime
();

117 
	g°d
::
m≠
<
Time
, 
	gTime
> 
	gm_buf„rSèã
;

118 
uöt32_t
 
	gm_øãCh™ges
;

119 
Time
 
	gm_èrgë_dt
;

120 
	g°d
::
m≠
<
Time
, > 
	gm_bôøãs
;

121 
	gm_bôøãE°im©e
;

122 
uöt32_t
 
	gm_£gmítId
;

124 
	g¥iv©e
:

132 
Reque°Segmít
();

141 
MesßgeRe˚ived
(
Packë
 
mesßge
);

144 
vútuÆ
 

145 
SèπAµliˇti⁄
();

146 
vútuÆ
 

147 
St›Aµliˇti⁄
();

149 
C⁄√˘i⁄Suc˚eded
(
På
<
Sockë
> 
sockë
);

151 
C⁄√˘i⁄Faûed
(
På
<
Sockë
> 
sockë
);

153 
D©aSíd
(
På
<
Sockë
>, 
uöt32_t
);

155 
H™dÀRód
(
På
<
Sockë
>);

156 
vútuÆ
 

157 
CÆcNextSegmít
(
uöt32_t
 
cuºR©e
, uöt32_à& 
√xtR©e
, 
Time
 & 
dñay
);

159 
LogBuf„rLevñ
(
Time
 
t
);

160 
ölöe


161 
SëWödow
(
Time
 
time
)

163 
	gm_wödow
 = 
time
;

166 
M≥gPœyî
 
	gm_∂ayî
;

167 
HâpP¨£r
 
	gm_∑r£r
;

168 
	gPå
<
	gSockë
> 
	gm_sockë
;

169 
Addªss
 
	gm_≥î
;

170 
boﬁ
 
	gm_c⁄√˘ed
;

171 
uöt32_t
 
	gm_tŸByãs
;

172 
Ty≥Id
 
	gm_tid
;

173 
	gTø˚dCÆlback
<
	gPå
<c⁄° 
	gPackë
> > 
	gm_txTø˚
;

174 
uöt32_t
 
	gm_videoId
;

175 
Time
 
	gm_°¨ãdRe˚ivög
;

176 
Time
 
	gm_sumDt
;

177 
Time
 
	gm_œ°Dt
;

178 
	gm_cou¡Objs
;

179 
	gm_id
;

180 
Time
 
	gm_ªque°Time
;

181 
uöt32_t
 
	gm_£gmít_byãs
;

182 
uöt32_t
 
	gm_bôR©e
;

183 
Time
 
	gm_wödow
;

184 
Time
 
	gm_£gmítFëchTime
;

	@dash-server.cc

21 
	~"ns3/addªss.h
"

22 
	~"ns3/addªss-utûs.h
"

23 
	~"ns3/log.h
"

24 
	~"ns3/öë-sockë-addªss.h
"

25 
	~"ns3/öë6-sockë-addªss.h
"

26 
	~"ns3/node.h
"

27 
	~"ns3/sockë.h
"

28 
	~"ns3/udp-sockë.h
"

29 
	~"ns3/simuœt‹.h
"

30 
	~"ns3/sockë-Á˘‹y.h
"

31 
	~"ns3/∑ckë.h
"

32 
	~"ns3/åa˚-sour˚-ac˚ss‹.h
"

33 
	~"ns3/udp-sockë-Á˘‹y.h
"

34 
	~"dash-£rvî.h
"

35 
	~"hâp-hódî.h
"

36 
	~"m≥g-hódî.h
"

37 
	~<ns3/øndom-v¨übÀ-°ªam.h
>

38 
	~<ns3/t˝-sockë.h
>

39 
	~<ns3/doubÀ.h
>

40 
	~"∑ø.h
"

41 
usög
 
«me•a˚
 
	g°d
;

44 
«me•a˚
 
	gns3


46 
NS_LOG_COMPONENT_DEFINE
("DashServer");

47 
NS_OBJECT_ENSURE_REGISTERED
(
DashSîvî
);

49 
Ty≥Id


50 
	gDashSîvî
::
GëTy≥Id
()

52 
Ty≥Id
 
tid
 =

53 
Ty≥Id
("ns3::DashSîvî").
SëP¨ít
<
Aµliˇti⁄
>().
AddC⁄°ru˘‹
<

54 
DashSîvî
>().
AddAâribuã
("Local",

55 "ThêAddªs†⁄ whichÅÿBödÅhêrx sockë.", 
AddªssVÆue
(),

56 
MakeAddªssAc˚ss‹
(&
DashSîvî
::
m_loˇl
), 
MakeAddªssCheckî
()).
AddAâribuã
(

58 
Ty≥IdVÆue
(
UdpSockëFa˘‹y
::
GëTy≥Id
()),

59 
MakeTy≥IdAc˚ss‹
(&
DashSîvî
::
m_tid
), 
MakeTy≥IdCheckî
()).
AddTø˚Sour˚
(

61 
MakeTø˚Sour˚Ac˚ss‹
(&
DashSîvî
::
m_rxTø˚
));

62  
	gtid
;

65 
	gDashSîvî
::
DashSîvî
()

67 
NS_LOG_FUNCTION
(
this
);

68 
	gm_sockë
 = 0;

69 
	gm_tŸÆRx
 = 0;

72 
	gDashSîvî
::~
DashSîvî
()

74 
NS_LOG_FUNCTION
(
this
);

77 
	gPå
<
	gSockë
>

78 
	gDashSîvî
::
GëLi°íögSockë
() const

80 
NS_LOG_FUNCTION
(
this
);

81  
	gm_sockë
;

84 
	g°d
::
li°
<
På
<
Sockë
> >

85 
DashSîvî
::
GëAc˚±edSockës
() const

87 
NS_LOG_FUNCTION
(
this
);

88  
	gm_sockëLi°
;

92 
	gDashSîvî
::
DoDi•o£
()

94 
NS_LOG_FUNCTION
(
this
);

95 
	gm_sockë
 = 0;

96 
	gm_sockëLi°
.
˛ór
();

99 
	gAµliˇti⁄
::
DoDi•o£
();

104 
	gDashSîvî
::
SèπAµliˇti⁄
()

106 
NS_LOG_FUNCTION
(
this
);

108 i‡(!
	gm_sockë
)

110 
	gm_sockë
 = 
Sockë
::
Cª©eSockë
(
GëNode
(), 
m_tid
);

111 
	gm_sockë
->
Böd
(
m_loˇl
);

112 
	gm_sockë
->
Li°í
();

114 i‡(
	gaddªssUtûs
::
IsMu…iˇ°
(
m_loˇl
))

116 
På
<
UdpSockë
> 
udpSockë
 = 
Dy«micCa°
<UdpSockë>(
m_sockë
);

117 i‡(
	gudpSockë
)

120 
	gudpSockë
->
Mu…iˇ°JoöGroup
(0, 
m_loˇl
);

124 
NS_FATAL_ERROR
("Error: joining multicast onáÇon-UDP socket");

129 
	gm_sockë
->
SëRecvCÆlback
(
MakeCÆlback
(&
DashSîvî
::
H™dÀRód
, 
this
));

131 
	gm_sockë
->
SëAc˚±CÆlback
(

132 
MakeNuŒCÆlback
<
boﬁ
, 
På
<
Sockë
>, c⁄° 
Addªss
 &>(),

133 
MakeCÆlback
(&
DashSîvî
::
H™dÀAc˚±
, 
this
));

134 
	gm_sockë
->
SëClo£CÆlbacks
(

135 
MakeCÆlback
(&
DashSîvî
::
H™dÀPìrClo£
, 
this
),

136 
MakeCÆlback
(&
DashSîvî
::
H™dÀPìrEº‹
, 
this
));

140 
	gDashSîvî
::
St›Aµliˇti⁄
()

142 
NS_LOG_FUNCTION
(
this
);

143 !
	gm_sockëLi°
.
em±y
())

145 
	gPå
<
	gSockë
> 
	gac˚±edSockë
 = 
m_sockëLi°
.
‰⁄t
();

146 
	gm_sockëLi°
.
p›_‰⁄t
();

147 
	gac˚±edSockë
->
Clo£
();

149 i‡(
	gm_sockë
)

151 
	gm_sockë
->
Clo£
();

152 
	gm_sockë
->
SëRecvCÆlback
(
MakeNuŒCÆlback
<, 
På
<
Sockë
> >());

157 
	gDashSîvî
::
H™dÀRód
(
På
<
Sockë
> 
sockë
)

159 
NS_LOG_FUNCTION
(
this
 << 
sockë
);

160 
	gPå
<
	gPackë
> 
	g∑ckë
;

161 
Addªss
 
	g‰om
;

162 (
	g∑ckë
 = 
sockë
->
RecvFrom
(
‰om
)))

164 i‡(
∑ckë
->
GëSize
() == 0)

168 
	gm_tŸÆRx
 +
∑ckë
->
GëSize
();

170 
HTTPHódî
 
	ghódî
;

171 
	g∑ckë
->
RemoveHódî
(
hódî
);

175 
SídSegmít
(
hódî
.
GëVideoId
(), hódî.
GëResﬁuti⁄
(),

176 
hódî
.
GëSegmítId
(), 
sockë
);

178 i‡(
	gI√tSockëAddªss
::
IsM©chögTy≥
(
‰om
))

180 
NS_LOG_INFO
(

181 "Aàtimê" << 
Simuœt‹
::
Now
 ().
GëSec⁄ds
 (Ë<< "†∑ckë sökÑe˚ived " << 
∑ckë
->
GëSize
 (Ë<< " byã†‰om " << 
I√tSockëAddªss
::
C⁄vîtFrom
(
‰om
).
GëIpv4
 (Ë<< "Ö‹à" << I√tSockëAddªss::C⁄vîtFrom (‰om).
GëP‹t
 (Ë<< "ÅŸÆ Rx " << 
m_tŸÆRx
 << " bytes");

183 i‡(
	gI√t6SockëAddªss
::
IsM©chögTy≥
(
‰om
))

185 
NS_LOG_INFO
(

186 "Aàtimê" << 
Simuœt‹
::
Now
 ().
GëSec⁄ds
 (Ë<< "†∑ckë sökÑe˚ived " << 
∑ckë
->
GëSize
 (Ë<< " byã†‰om " << 
I√t6SockëAddªss
::
C⁄vîtFrom
(
‰om
).
GëIpv6
 (Ë<< "Ö‹à" << I√t6SockëAddªss::C⁄vîtFrom (‰om).
GëP‹t
 (Ë<< "ÅŸÆ Rx " << 
m_tŸÆRx
 << " bytes");

188 
m_rxTø˚
(
∑ckë
, 
‰om
);

193 
	gDashSîvî
::
H™dÀPìrClo£
(
På
<
Sockë
> 
sockë
)

195 
NS_LOG_FUNCTION
(
this
 << 
sockë
);

199 
	gDashSîvî
::
H™dÀPìrEº‹
(
På
<
Sockë
> 
sockë
)

201 
NS_LOG_FUNCTION
(
this
 << 
sockë
);

205 
	gDashSîvî
::
H™dÀAc˚±
(
På
<
Sockë
> 
s
, c⁄° 
Addªss
& 
‰om
)

207 
NS_LOG_FUNCTION
(
this
 << 
s
 << 
‰om
);

208 
	gs
->
SëRecvCÆlback
(
MakeCÆlback
(&
DashSîvî
::
H™dÀRód
, 
this
));

209 
	gs
->
SëSídCÆlback
(
MakeCÆlback
(&
DashSîvî
::
D©aSíd
, 
this
));

210 
	gm_sockëLi°
.
push_back
(
s
);

215 
	gDashSîvî
::
D©aSíd
(
På
<
Sockë
> 
sockë
, 
uöt32_t
)

217 
NS_LOG_FUNCTION
(
this
);

218 
	g°d
::
m≠
<
På
<
Sockë
>, std::
queue
<
Packë
> >::
ôî©‹
 
ôî
 =

219 
m_queues
.
begö
(); 
	gôî
 !m_queues.
íd
(); ++iter)

221 
HTTPHódî
 
	ghâpHódî
;

222 
MPEGHódî
 
	gm≥gHódî
;

224 i‡(
	gôî
->
	g£c⁄d
.
size
())

226 
	gPå
<
	gPackë
> 
	g‰ame
 = 
ôî
->
£c⁄d
.
‰⁄t
().
C›y
();

228 
	g‰ame
->
RemoveHódî
(
m≥gHódî
);

229 
	g‰ame
->
RemoveHódî
(
hâpHódî
);

231 
NS_LOG_INFO
(

232 "VidId: " << 
hâpHódî
.
GëVideoId
(Ë<< "ÑxAv" << 
ôî
->
fú°
->
GëRxAvaûabÀ
(Ë<< " queue"<< iãr->
£c⁄d
.
size
(Ë<< "Ñes" << hâpHódî.
GëResﬁuti⁄
());

236 !
	gm_queues
[
sockë
].
em±y
())

238 
	gbyãs
;

239 
	gPå
<
	gPackë
> 
	g‰ame
 = 
m_queues
[
sockë
].
‰⁄t
().
C›y
();

240 i‡((
	gbyãs
 = 
sockë
->
Síd
(
‰ame
)Ë!(Ë‰ame->
GëSize
())

242 
NS_LOG_INFO
("CouldÇot send frame");

243 i‡(
	gbyãs
 != -1)

245 
NS_FATAL_ERROR
("Oops, we sent halfá frame :(");

249 
	gm_queues
[
sockë
].
p›
();

252 
NS_LOG_INFO
("DATA WAS JUST SENT!!!");

257 
	gDashSîvî
::
SídSegmít
(
uöt32_t
 
video_id
, uöt32_à
ªsﬁuti⁄
,

258 
uöt32_t
 
£gmít_id
, 
På
<
Sockë
> 
sockë
)

262 
	gco
=0;

263 if(
	gco
==0){

264 
cout
<<"ö sîvî side"<<
ídl
;

265 
size_t
 
	gj
=0,
	gmax
=
video_num
.
size
();j!=
max
;j++){

266 
	gcout
<<
	gvideo_num
[
j
]<<
	gídl
;

268 
	gco
++;

273 
	gavg_∑ckësize
 = 
ªsﬁuti⁄
 / (50 * 8);

275 
HTTPHódî
 
	ghâp_hódî_tmp
;

276 
MPEGHódî
 
	gm≥g_hódî_tmp
;

278 
	gPå
<
	gUnif‹mR™domV¨übÀ
> 
	g‰ame_size_gí
 = 
Cª©eObje˘
<
Unif‹mR™domV¨übÀ
> ();

280 
	g‰ame_size_gí
->
SëAâribuã
 ("Mö", 
DoubÀVÆue
 (1288));

289 
	g‰ame_size_gí
->
SëAâribuã
 ("Max", 
DoubÀVÆue
 (1288));

292 
uöt32_t
 
	gf_id
 = 0; f_id < 
	gMPEG_FRAMES_PER_SEGMENT
; f_id++)

294 
uöt32_t
 
	g‰ame_size
 = (Ë
‰ame_size_gí
->
GëVÆue
();

298 
HTTPHódî
 
	ghâp_hódî
;

299 
	ghâp_hódî
.
SëMesßgeTy≥
(
HTTP_RESPONSE
);

300 
	ghâp_hódî
.
SëVideoId
(
video_id
);

301 
	ghâp_hódî
.
SëResﬁuti⁄
(
ªsﬁuti⁄
);

302 
	ghâp_hódî
.
SëSegmítId
(
£gmít_id
);

304 
MPEGHódî
 
	gm≥g_hódî
;

305 
	gm≥g_hódî
.
SëFømeId
(
f_id
);

306 
	gm≥g_hódî
.
SëPœybackTime
(

307 
MûliSec⁄ds
(

308 (
f_id
 + (
£gmít_id
 * 
MPEG_FRAMES_PER_SEGMENT
))

309 * 
MPEG_TIME_BETWEEN_FRAMES
));

311 
	gcout
<<
	gSimuœt‹
::
Now
()<<": "<<(
f_id
 + (
£gmít_id
 * 
MPEG_FRAMES_PER_SEGMENT
))* 
MPEG_TIME_BETWEEN_FRAMES
<<
ídl
;

315 
	gm≥g_hódî
.
SëTy≥
('B');

316 
	gm≥g_hódî
.
SëSize
(
‰ame_size
);

318 
	gPå
<
	gPackë
> 
	g‰ame
 = 
Cª©e
<
Packë
>(
‰ame_size
);

319 
	g‰ame
->
AddHódî
(
hâp_hódî
);

320 
	g‰ame
->
AddHódî
(
m≥g_hódî
);

321 
NS_LOG_INFO
(

322 "SENDING PACKET " << 
f_id
 << " " << 
‰ame
->
GëSize
(Ë<< "Ñes=" << 
hâp_hódî
.
GëResﬁuti⁄
(Ë<< " size=" << 
m≥g_hódî
.GëSize(Ë<< "ávg=" << 
avg_∑ckësize
);

324 
	gm_queues
[
sockë
].
push
(*
‰ame
);

326 
D©aSíd
(
sockë
, 0);

	@dash-server.h

21 #i‚de‡
DASH_SERVER_H


22 
	#DASH_SERVER_H


	)

24 
	~"ns3/≠∂iˇti⁄.h
"

25 
	~"ns3/evít-id.h
"

26 
	~"ns3/±r.h
"

27 
	~"ns3/åa˚d-ˇŒback.h
"

28 
	~"ns3/addªss.h
"

29 
	~<m≠
>

30 
	~<queue
>

32 
«me•a˚
 
	gns3


35 
˛ass
 
	gAddªss
;

36 
˛ass
 
	gSockë
;

37 
˛ass
 
	gPackë
;

52 ˛as†
	cDashSîvî
 : 
public
 
Aµliˇti⁄


54 
public
:

55 
Ty≥Id


56 
GëTy≥Id
();

57 
DashSîvî
();

59 
	gvútuÆ


60 ~
DashSîvî
();

65 
	gPå
<
	gSockë
>

66 
GëLi°íögSockë
() const;

71 
	g°d
::
li°
<
På
<
Sockë
> >

72 
GëAc˚±edSockës
() const;

74 
	g¥Ÿe˘ed
:

75 
vútuÆ
 

76 
DoDi•o£
();

77 
	g¥iv©e
:

79 
vútuÆ
 

80 
SèπAµliˇti⁄
();

81 
vútuÆ
 

82 
St›Aµliˇti⁄
();

85 
H™dÀRód
(
På
<
Sockë
>);

87 
D©aSíd
(
På
<
Sockë
>, 
uöt32_t
);

90 
SídSegmít
(
uöt32_t
 
video_id
, uöt32_à
ªsﬁuti⁄
, uöt32_à
£gmít_id
,

91 
På
<
Sockë
> 
sockë
);

93 
H™dÀAc˚±
(
På
<
Sockë
>, c⁄° 
Addªss
& 
‰om
);

95 
H™dÀPìrClo£
(
På
<
Sockë
>);

97 
H™dÀPìrEº‹
(
På
<
Sockë
>);

101 
	gPå
<
	gSockë
> 
	gm_sockë
;

102 
	g°d
::
li°
<
På
<
Sockë
> > 
m_sockëLi°
;

104 
Addªss
 
	gm_loˇl
;

105 
uöt32_t
 
	gm_tŸÆRx
;

106 
Ty≥Id
 
	gm_tid
;

107 
	gTø˚dCÆlback
<
	gPå
<c⁄° 
	gPackë
>, c⁄° 
	gAddªss
 &> 
	gm_rxTø˚
;

110 
	g°d
::
m≠
<
På
<
Sockë
>, std::
queue
<
Packë
> > 
m_queues
;

	@http-header.cc

21 
	~"ns3/as£π.h
"

22 
	~"ns3/log.h
"

23 
	~"ns3/hódî.h
"

24 
	~"ns3/simuœt‹.h
"

25 
	~"hâp-hódî.h
"

27 
NS_LOG_COMPONENT_DEFINE
("HTTPHeader");

29 
«me•a˚
 
	gns3


32 
NS_OBJECT_ENSURE_REGISTERED
 (
HTTPHódî
)

35 
	gHTTPHódî
::
HTTPHódî
() :

36 
m_£q
(0), 
m_ts
(
Simuœt‹
::
Now
().
GëTimeSãp
()), 
m_mesßge_ty≥
(

37 
HTTP_REQUEST
), 
m_video_id
(0), 
m_ªsﬁuti⁄
(0), 
m_£gmít_id
(0)

40 
NS_LOG_FUNCTION
(
this
);

44 
	gHTTPHódî
::
SëSeq
(
uöt32_t
 
£q
)

46 
NS_LOG_FUNCTION
(
this
 << 
£q
);

47 
	gm_£q
 = 
£q
;

49 
uöt32_t


50 
	gHTTPHódî
::
GëSeq
() const

52 
NS_LOG_FUNCTION
(
this
);

53  
	gm_£q
;

57 
	gHTTPHódî
::
SëMesßgeTy≥
(
uöt32_t
 
mesßge_ty≥
)

59 
NS_LOG_FUNCTION
(
this
 << 
mesßge_ty≥
);

60 
	gm_mesßge_ty≥
 = 
mesßge_ty≥
;

63 
uöt32_t


64 
	gHTTPHódî
::
GëMesßgeTy≥
() const

66 
NS_LOG_FUNCTION
(
this
);

67  
	gm_mesßge_ty≥
;

70 
	gHTTPHódî
::
SëVideoId
(
uöt32_t
 
video_id
)

73 
NS_LOG_FUNCTION
(
this
 << 
video_id
);

74 
	gm_video_id
 = 
video_id
;

76 
uöt32_t


77 
	gHTTPHódî
::
GëVideoId
() const

80 
NS_LOG_FUNCTION
(
this
);

81  
	gm_video_id
;

84 
	gHTTPHódî
::
SëResﬁuti⁄
(
uöt32_t
 
ªsﬁuti⁄
)

87 
NS_LOG_FUNCTION
(
this
 << 
ªsﬁuti⁄
);

88 
	gm_ªsﬁuti⁄
 = 
ªsﬁuti⁄
;

90 
uöt32_t


91 
	gHTTPHódî
::
GëResﬁuti⁄
() const

93 
NS_LOG_FUNCTION
(
this
);

94  
	gm_ªsﬁuti⁄
;

98 
	gHTTPHódî
::
SëSegmítId
(
uöt32_t
 
£gmít_id
)

100 
NS_LOG_FUNCTION
(
this
 << 
£gmít_id
);

101 
	gm_£gmít_id
 = 
£gmít_id
;

103 
uöt32_t


104 
	gHTTPHódî
::
GëSegmítId
() const

106 
NS_LOG_FUNCTION
(
this
);

107  
	gm_£gmít_id
;

110 
Time


111 
	gHTTPHódî
::
GëTs
() const

113 
NS_LOG_FUNCTION
(
this
);

114  
TimeSãp
(
m_ts
);

117 
Ty≥Id


118 
	gHTTPHódî
::
GëTy≥Id
()

120 
Ty≥Id
 
tid
 =

121 
Ty≥Id
("ns3::HTTPHódî").
SëP¨ít
<
Hódî
>().
AddC⁄°ru˘‹
<
HTTPHódî
>();

122  
	gtid
;

124 
Ty≥Id


125 
	gHTTPHódî
::
GëIn°™˚Ty≥Id
() const

127  
GëTy≥Id
();

130 
	gHTTPHódî
::
Pröt
(
°d
::
o°ªam
 &
os
) const

132 
NS_LOG_FUNCTION
(
this
 << &
os
);

133 
	gos
 << "(£q=" << 
	gm_£q
 << "Åime=" << 
TimeSãp
(
m_ts
).
GëSec⁄ds
() << ")";

135 
uöt32_t


136 
	gHTTPHódî
::
GëSîülizedSize
() const

138 
NS_LOG_FUNCTION
(
this
);

143 
	gHTTPHódî
::
Sîülize
(
Buf„r
::
Iãøt‹
 
°¨t
) const

145 
NS_LOG_FUNCTION
(
this
 << &
°¨t
);

146 
	gBuf„r
::
Iãøt‹
 
i
 = 
°¨t
;

147 
	gi
.
WrôeHt⁄U32
(
m_£q
);

148 
	gi
.
WrôeHt⁄U64
(
m_ts
);

149 
	gi
.
WrôeHt⁄U32
(
m_mesßge_ty≥
);

150 
	gi
.
WrôeHt⁄U32
(
m_video_id
);

151 
	gi
.
WrôeHt⁄U32
(
m_ªsﬁuti⁄
);

152 
	gi
.
WrôeHt⁄U32
(
m_£gmít_id
);

154 
uöt32_t


155 
	gHTTPHódî
::
De£rülize
(
Buf„r
::
Iãøt‹
 
°¨t
)

157 
NS_LOG_FUNCTION
(
this
 << &
°¨t
);

158 
	gBuf„r
::
Iãøt‹
 
i
 = 
°¨t
;

159 
	gm_£q
 = 
i
.
RódNtohU32
();

160 
	gm_ts
 = 
i
.
RódNtohU64
();

161 
	gm_mesßge_ty≥
 = 
i
.
RódNtohU32
();

162 
	gm_video_id
 = 
i
.
RódNtohU32
();

163 
	gm_ªsﬁuti⁄
 = 
i
.
RódNtohU32
();

164 
	gm_£gmít_id
 = 
i
.
RódNtohU32
();

165  
GëSîülizedSize
();

	@http-header.h

21 #i‚de‡
HTTP_TS_HEADER_H


22 
	#HTTP_TS_HEADER_H


	)

24 
	~"ns3/hódî.h
"

25 
	~"ns3/n°ime.h
"

27 
«me•a˚
 
	gns3


35 
	#HTTP_REQUEST
 0

	)

36 
	#HTTP_RESPONSE
 1

	)

38 ˛as†
	cHTTPHódî
 : 
public
 
Hódî


40 
public
:

41 
HTTPHódî
();

47 
SëSeq
(
uöt32_t
 
£q
);

52 
uöt32_t


53 
GëSeq
() const;

59 
SëMesßgeTy≥
(
uöt32_t
 
mesßge_ty≥
);

60 
uöt32_t


61 
GëMesßgeTy≥
() const;

64 
SëVideoId
(
uöt32_t
 
video_id
);

65 
uöt32_t


66 
GëVideoId
() const;

69 
SëResﬁuti⁄
(
uöt32_t
 
ªsﬁuti⁄
);

70 
uöt32_t


71 
GëResﬁuti⁄
() const;

74 
SëSegmítId
(
uöt32_t
 
£gmít_id
);

75 
uöt32_t


76 
GëSegmítId
() const;

78 
Time


79 
GëTs
() const;

81 
Ty≥Id


82 
GëTy≥Id
();

84 
vútuÆ
 
uöt32_t


85 
GëSîülizedSize
() const;

87 
	g¥iv©e
:

88 
vútuÆ
 
Ty≥Id


89 
GëIn°™˚Ty≥Id
() const;

90 
vútuÆ
 

91 
Pröt
(
°d
::
o°ªam
 &
os
) const;

92 
vútuÆ
 

93 
Sîülize
(
Buf„r
::
Iãøt‹
 
°¨t
) const;

94 
vútuÆ
 
uöt32_t


95 
De£rülize
(
Buf„r
::
Iãøt‹
 
°¨t
);

97 
uöt32_t
 
	gm_£q
;

98 
uöt64_t
 
	gm_ts
;

100 
uöt32_t
 
	gm_mesßge_ty≥
;

101 
uöt32_t
 
	gm_video_id
;

102 
uöt32_t
 
	gm_ªsﬁuti⁄
;

103 
uöt32_t
 
	gm_£gmít_id
;

	@http-parser.cc

21 
	~"hâp-∑r£r.h
"

22 
	~"ns3/log.h
"

23 
	~"ns3/addªss.h
"

24 
	~"ns3/sockë.h
"

25 
	~"ns3/∑ckë.h
"

26 
	~"ns3/simuœt‹.h
"

27 
	~"hâp-hódî.h
"

28 
	~"m≥g-hódî.h
"

29 
	~"dash-˛õ¡.h
"

31 
NS_LOG_COMPONENT_DEFINE
("HttpParser");

33 
«me•a˚
 
	gns3


36 
	gHâpP¨£r
::
HâpP¨£r
() :

37 
m_byãs
(0), 
m_≠p
(
NULL
), 
m_œ°mósuªmít
("0s")

39 
NS_LOG_FUNCTION
(
this
);

42 
	gHâpP¨£r
::~
HâpP¨£r
()

44 
NS_LOG_FUNCTION
(
this
);

48 
	gHâpP¨£r
::
SëAµ
(
DashClõ¡
 *
≠p
)

50 
NS_LOG_FUNCTION
(
this
 << 
≠p
);

51 
	gm_≠p
 = 
≠p
;

54 
	gHâpP¨£r
::
RódSockë
(
På
<
Sockë
> 
sockë
)

56 
NS_LOG_FUNCTION
(
this
 << 
sockë
);

57 
Addªss
 
	g‰om
;

58 
	gbyãs
 = 
sockë
->
RecvFrom
(&
m_buf„r
[
m_byãs
], 
MPEG_MAX_MESSAGE
 - m_bytes,

59 0, 
‰om
);

61 
MPEGHódî
 
	gm≥g_hódî
;

62 
HTTPHódî
 
	ghâp_hódî
;

64 
uöt32_t
 
	ghódîsize
 = 
m≥g_hódî
.
GëSîülizedSize
()

65 + 
hâp_hódî
.
GëSîülizedSize
();

67 i‡(
	gbyãs
 > 0)

69 
	gm_byãs
 +
byãs
;

71 i‡(
	gm_œ°mósuªmít
 > 
Time
("0s"))

73 
NS_LOG_INFO
(

74 
Simuœt‹
::
Now
().
GëSec⁄ds
(Ë<< " byãs: " << 
byãs
 << " dt: " << (Simuœt‹::Now(Ë- 
m_œ°mósuªmít
).GëSec⁄ds(Ë<< " bôøã: " << (8 * (byã†+ 
hódîsize
)/ (Simulator::Now() - m_lastmeasurement).GetSeconds()));

76 
	gm_œ°mósuªmít
 = 
Simuœt‹
::
Now
();

79 
NS_LOG_INFO
(

80 "### Buf„∏•a˚: " << 
m_byãs
 << " QueuêÀngth " << 
m_≠p
->
GëPœyî
().
GëQueueSize
());

82 i‡(
	gm_byãs
 < 
	ghódîsize
)

87 
Packë
 
hódîPackë
(
m_buf„r
, 
hódîsize
);

88 
	ghódîPackë
.
RemoveHódî
(
m≥g_hódî
);

90 
uöt32_t
 
	gmesßge_size
 = 
hódîsize
 + 
m≥g_hódî
.
GëSize
();

92 i‡(
	gm_byãs
 < 
	gmesßge_size
)

96 
Packë
 
mesßge
(
m_buf„r
, 
mesßge_size
);

98 
memmove
(
m_buf„r
, &m_buf„r[
mesßge_size
], 
m_byãs
 - message_size);

99 
	gm_byãs
 -
mesßge_size
;

100 
	gm_≠p
->
MesßgeRe˚ived
(
mesßge
);

102 
RódSockë
(
sockë
);

	@http-parser.h

21 #i‚de‡
HTTP_PARSER_H_


22 
	#HTTP_PARSER_H_


	)

24 
	~<ns3/±r.h
>

25 
	~"m≥g-hódî.h
"

27 
«me•a˚
 
	gns3


30 
˛ass
 
	gSockë
;

31 
˛ass
 
	gDashClõ¡
;

33 ˛as†
	cHâpP¨£r


35 
	gpublic
:

36 
HâpP¨£r
();

37 
	gvútuÆ


38 ~
HâpP¨£r
();

40 
RódSockë
(
På
<
Sockë
> 
sockë
);

42 
SëAµ
(
DashClõ¡
 *
≠p
);

44 
	g¥iv©e
:

45 
uöt8_t
 
m_buf„r
[
MPEG_MAX_MESSAGE
];

46 
uöt32_t
 
	gm_byãs
;

47 
DashClõ¡
 *
	gm_≠p
;

49 
Time
 
	gm_œ°mósuªmít
;

	@mpeg-header.cc

21 
	~"ns3/as£π.h
"

22 
	~"ns3/log.h
"

23 
	~"ns3/hódî.h
"

24 
	~"ns3/simuœt‹.h
"

25 
	~"m≥g-hódî.h
"

27 
NS_LOG_COMPONENT_DEFINE
("MPEGHeader");

29 
«me•a˚
 
	gns3


32 
NS_OBJECT_ENSURE_REGISTERED
 (
MPEGHódî
)

35 
	gMPEGHódî
::
MPEGHódî
() :

36 
m_£q
(0), 
m_ts
(
Simuœt‹
::
Now
().
GëTimeSãp
()), 
m_‰ame_id
(0), 
m_∂ayback_time
(

37 0), 
m_ty≥
('B')

40 
NS_LOG_FUNCTION
(
this
);

44 
	gMPEGHódî
::
SëSeq
(
uöt32_t
 
£q
)

46 
NS_LOG_FUNCTION
(
this
 << 
£q
);

47 
	gm_£q
 = 
£q
;

49 
uöt32_t


50 
	gMPEGHódî
::
GëSeq
() const

52 
NS_LOG_FUNCTION
(
this
);

53  
	gm_£q
;

57 
	gMPEGHódî
::
SëFømeId
(
uöt32_t
 
‰ame_id
)

59 
NS_LOG_FUNCTION
(
this
);

60 
	gm_‰ame_id
 = 
‰ame_id
;

62 
uöt32_t


63 
	gMPEGHódî
::
GëFømeId
() const

65 
NS_LOG_FUNCTION
(
this
);

66  
	gm_‰ame_id
;

70 
	gMPEGHódî
::
SëPœybackTime
(
Time
 
∂ayback_time
)

72 
NS_LOG_FUNCTION
(
this
);

73 
	gm_∂ayback_time
 = 
∂ayback_time
.
GëTimeSãp
();

75 
Time


76 
	gMPEGHódî
::
GëPœybackTime
() const

78 
NS_LOG_FUNCTION
(
this
);

79  
TimeSãp
(
m_∂ayback_time
);

83 
	gMPEGHódî
::
SëTy≥
(
uöt32_t
 
ty≥
)

85 
NS_LOG_FUNCTION
(
this
);

86 
	gm_ty≥
 = 
ty≥
;

88 
uöt32_t


89 
	gMPEGHódî
::
GëTy≥
() const

91 
NS_LOG_FUNCTION
(
this
);

92  
	gm_ty≥
;

96 
	gMPEGHódî
::
SëSize
(
uöt32_t
 
size
)

98 
NS_LOG_FUNCTION
(
this
);

99 
	gm_size
 = 
size
;

102 
uöt32_t


103 
	gMPEGHódî
::
GëSize
() const

105 
NS_LOG_FUNCTION
(
this
);

106  
	gm_size
;

108 
Time


109 
	gMPEGHódî
::
GëTs
() const

111 
NS_LOG_FUNCTION
(
this
);

112  
TimeSãp
(
m_ts
);

115 
Ty≥Id


116 
	gMPEGHódî
::
GëTy≥Id
()

118 
Ty≥Id
 
tid
 =

119 
Ty≥Id
("ns3::MPEGHódî").
SëP¨ít
<
Hódî
>().
AddC⁄°ru˘‹
<
MPEGHódî
>();

120  
	gtid
;

122 
Ty≥Id


123 
	gMPEGHódî
::
GëIn°™˚Ty≥Id
() const

125  
GëTy≥Id
();

128 
	gMPEGHódî
::
Pröt
(
°d
::
o°ªam
 &
os
) const

130 
NS_LOG_FUNCTION
(
this
 << &
os
);

131 
	gos
 << "(£q=" << 
	gm_£q
 << "Åime=" << 
TimeSãp
(
m_ts
).
GëSec⁄ds
() << ")";

133 
uöt32_t


134 
	gMPEGHódî
::
GëSîülizedSize
() const

136 
NS_LOG_FUNCTION
(
this
);

141 
	gMPEGHódî
::
Sîülize
(
Buf„r
::
Iãøt‹
 
°¨t
) const

143 
NS_LOG_FUNCTION
(
this
 << &
°¨t
);

144 
	gBuf„r
::
Iãøt‹
 
i
 = 
°¨t
;

145 
	gi
.
WrôeHt⁄U32
(
m_£q
);

146 
	gi
.
WrôeHt⁄U64
(
m_ts
);

147 
	gi
.
WrôeHt⁄U32
(
m_‰ame_id
);

148 
	gi
.
WrôeHt⁄U64
(
m_∂ayback_time
);

149 
	gi
.
WrôeHt⁄U32
(
m_ty≥
);

150 
	gi
.
WrôeHt⁄U32
(
m_size
);

152 
uöt32_t


153 
	gMPEGHódî
::
De£rülize
(
Buf„r
::
Iãøt‹
 
°¨t
)

155 
NS_LOG_FUNCTION
(
this
 << &
°¨t
);

156 
	gBuf„r
::
Iãøt‹
 
i
 = 
°¨t
;

157 
	gm_£q
 = 
i
.
RódNtohU32
();

158 
	gm_ts
 = 
i
.
RódNtohU64
();

159 
	gm_‰ame_id
 = 
i
.
RódNtohU32
();

160 
	gm_∂ayback_time
 = 
i
.
RódNtohU64
();

161 
	gm_ty≥
 = 
i
.
RódNtohU32
();

162 
	gm_size
 = 
i
.
RódNtohU32
();

163  
GëSîülizedSize
();

	@mpeg-header.h

21 #i‚de‡
MPEG_HEADER_H


22 
	#MPEG_HEADER_H


	)

24 
	~"ns3/hódî.h
"

25 
	~"ns3/n°ime.h
"

27 
«me•a˚
 
	gns3


37 
	#MPEG_MAX_MESSAGE
 100000

	)

38 
	#MPEG_FRAMES_PER_SEGMENT
 100

39 
	#MPEG_TIME_BETWEEN_FRAMES
 20

40 ˛as†
	cMPEGHódî
 : 
public
 
Hódî


	)

42 
	gpublic
:

43 
MPEGHódî
();

49 
SëSeq
(
uöt32_t
 
£q
);

53 
uöt32_t


54 
GëSeq
() const;

60 
SëFømeId
(
uöt32_t
 
‰ame_id
);

61 
uöt32_t


62 
GëFømeId
() const;

65 
SëPœybackTime
(
Time
 
∂ayback_time
);

66 
Time


67 
GëPœybackTime
() const;

70 
SëTy≥
(
uöt32_t
 
ty≥
);

71 
uöt32_t


72 
GëTy≥
() const;

75 
SëSize
(
uöt32_t
 
size
);

76 
uöt32_t


77 
GëSize
() const;

79 
Time


80 
GëTs
() const;

82 
Ty≥Id


83 
GëTy≥Id
();

85 
vútuÆ
 
uöt32_t


86 
GëSîülizedSize
() const;

88 
	g¥iv©e
:

89 
vútuÆ
 
Ty≥Id


90 
GëIn°™˚Ty≥Id
() const;

91 
vútuÆ
 

92 
Pröt
(
°d
::
o°ªam
 &
os
) const;

93 
vútuÆ
 

94 
Sîülize
(
Buf„r
::
Iãøt‹
 
°¨t
) const;

95 
vútuÆ
 
uöt32_t


96 
De£rülize
(
Buf„r
::
Iãøt‹
 
°¨t
);

98 
uöt32_t
 
	gm_£q
;

99 
uöt64_t
 
	gm_ts
;

101 
uöt32_t
 
	gm_‰ame_id
;

102 
uöt64_t
 
	gm_∂ayback_time
;

103 
uöt32_t
 
	gm_ty≥
;

104 
uöt32_t
 
	gm_size
;

	@mpeg-player.cc

21 
	~"ns3/log.h
"

22 
	~"ns3/n°ime.h
"

23 
	~"ns3/simuœt‹.h
"

24 
	~"hâp-hódî.h
"

25 
	~"m≥g-hódî.h
"

26 
	~"m≥g-∂ayî.h
"

27 
	~"dash-˛õ¡.h
"

28 
	~<cm©h
>

30 
NS_LOG_COMPONENT_DEFINE
("MpegPlayer");

31 
«me•a˚
 
	gns3


34 
	gM≥gPœyî
::
M≥gPœyî
() :

35 
m_°©e
(
MPEG_PLAYER_NOT_STARTED
), 
m_öãºru±i⁄s
(0), 
m_tŸÆR©e
(0), 
m_möR©e
(

36 100000000), 
m_‰amesPœyed
(0), 
m_buf„rDñay
("0s")

38 
NS_LOG_FUNCTION
(
this
);

41 
	gM≥gPœyî
::~
M≥gPœyî
()

43 
NS_LOG_FUNCTION
(
this
);

47 
	gM≥gPœyî
::
GëQueueSize
()

49  
m_queue
.
size
();

52 
Time


53 
	gM≥gPœyî
::
GëRólPœyTime
(
Time
 
∂ayTime
)

55 
NS_LOG_INFO
(

56 " Sèπ: " << 
m_°¨t_time
.
GëSec⁄ds
(Ë<< " I¡î: " << 
m_öãºu±i⁄_time
.GëSec⁄ds(Ë<< "Öœytime: " << 
∂ayTime
.GëSec⁄ds(Ë<< "Çow: " << 
Simuœt‹
::
Now
().GetSeconds() << "áctual: " << (m_start_time + m_interruption_time +ÖlayTime).GetSeconds());

58  
	gm_°¨t_time
 + 
	gm_öãºu±i⁄_time


59 + (
	gm_°©e
 =
MPEG_PLAYER_PAUSED
 ?

60 (
Simuœt‹
::
Now
(Ë- 
m_œ°∑u£d
Ë: 
Sec⁄ds
(0)Ë+ 
∂ayTime


61 - 
Simuœt‹
::
Now
();

65 
	gM≥gPœyî
::
Re˚iveFøme
(
På
<
Packë
> 
mesßge
)

67 
NS_LOG_FUNCTION
(
this
 << 
mesßge
);

68 
NS_LOG_INFO
("Re˚ived Fømê" << 
m_°©e
);

70 
	gPå
<
	gPackë
> 
	gmsg
 = 
mesßge
->
C›y
();

72 
	gm_queue
.
push
(
msg
);

73 i‡(
	gm_°©e
 =
MPEG_PLAYER_PAUSED
)

75 
NS_LOG_INFO
("PlayÑesumed");

76 
	gm_°©e
 = 
MPEG_PLAYER_PLAYING
;

77 
	gm_öãºu±i⁄_time
 +(
Simuœt‹
::
Now
(Ë- 
m_œ°∑u£d
);

78 
PœyFøme
();

80 i‡(
	gm_°©e
 =
MPEG_PLAYER_NOT_STARTED
)

82 
NS_LOG_INFO
("Play started");

83 
	gm_°©e
 = 
MPEG_PLAYER_PLAYING
;

84 
	gm_°¨t_time
 = 
Simuœt‹
::
Now
();

85 
	gSimuœt‹
::
ScheduÀ
(
Simuœt‹
::
Now
(), &
M≥gPœyî
::
PœyFøme
, 
this
);

90 
	gM≥gPœyî
::
Sèπ
()

92 
NS_LOG_FUNCTION
(
this
);

93 
	gm_°©e
 = 
MPEG_PLAYER_PLAYING
;

94 
	gm_öãºu±i⁄_time
 = 
Sec⁄ds
(0);

99 
	gM≥gPœyî
::
PœyFøme
()

102 
NS_LOG_FUNCTION
(
this
);

103 i‡(
	gm_°©e
 =
MPEG_PLAYER_DONE
)

107 i‡(
	gm_queue
.
em±y
())

109 
NS_LOG_INFO
(
Simuœt‹
::
Now
().
GëSec⁄ds
() << " No framesÅoÖlay");

110 
	gm_°©e
 = 
MPEG_PLAYER_PAUSED
;

111 
	gm_œ°∑u£d
 = 
Simuœt‹
::
Now
();

112 
	gm_öãºru±i⁄s
++;

115 
	gPå
<
	gPackë
> 
	gmesßge
 = 
m_queue
.
‰⁄t
();

116 
	gm_queue
.
p›
();

118 
MPEGHódî
 
	gm≥g_hódî
;

119 
HTTPHódî
 
	ghâp_hódî
;

121 
	gmesßge
->
RemoveHódî
(
m≥g_hódî
);

122 
	gmesßge
->
RemoveHódî
(
hâp_hódî
);

124 
	gm_tŸÆR©e
 +
hâp_hódî
.
GëResﬁuti⁄
();

125 i‡(
	ghâp_hódî
.
GëSegmítId
() > 0)

127 
	gm_möR©e
 =

128 
hâp_hódî
.
GëResﬁuti⁄
(Ë< 
m_möR©e
 ?

129 
hâp_hódî
.
GëResﬁuti⁄
(Ë: 
m_möR©e
;

131 
	gm_‰amesPœyed
++;

136 
Time
 
	gb_t
 = 
GëRólPœyTime
(
m≥g_hódî
.
GëPœybackTime
());

138 i‡(
	gm_buf„rDñay
 > 
Time
("0s"Ë&& 
	gb_t
 < m_buf„rDñay && 
	gm_dashClõ¡
)

140 
	gm_dashClõ¡
->
Reque°Segmít
();

141 
	gm_buf„rDñay
 = 
Sec⁄ds
(0);

142 
	gm_dashClõ¡
 = 
NULL
;

145 
NS_LOG_INFO
(

146 
Simuœt‹
::
Now
().
GëSec⁄ds
(Ë<< " PLAYING FRAME: " << " VidId: " << 
hâp_hódî
.
GëVideoId
(Ë<< " SegId: " << hâp_hódî.
GëSegmítId
(Ë<< " Res: " << hâp_hódî.
GëResﬁuti⁄
(Ë<< " FømeId: " << 
m≥g_hódî
.
GëFømeId
(Ë<< " PœyTime: " << m≥g_hódî.
GëPœybackTime
().GëSec⁄ds(Ë<< " Ty≥: " << (Ëm≥g_hódî.
GëTy≥
(Ë<< " i¡îTime: " << 
m_öãºu±i⁄_time
.GëSec⁄ds(Ë<< " queueLígth: " << 
m_queue
.
size
());

154 
	gSimuœt‹
::
ScheduÀ
(
MûliSec⁄ds
(2000), &
M≥gPœyî
::
PœyFøme
, 
this
);

	@mpeg-player.h

21 #i‚de‡
MPEG_PLAYER_H_


22 
	#MPEG_PLAYER_H_


	)

24 
	~<queue
>

25 
	~<m≠
>

26 
	~"ns3/±r.h
"

27 
	~"ns3/∑ckë.h
"

29 
«me•a˚
 
	gns3


33 
	gMPEG_PLAYER_PAUSED
, 
	gMPEG_PLAYER_PLAYING
, 
	gMPEG_PLAYER_NOT_STARTED
, 
	gMPEG_PLAYER_DONE


36 
˛ass
 
	gDashClõ¡
;

38 ˛as†
	cM≥gPœyî


40 
	gpublic
:

41 
M≥gPœyî
();

43 
	gvútuÆ


44 ~
M≥gPœyî
();

47 
Re˚iveFøme
(
På
<
Packë
> 
mesßge
);

50 
GëQueueSize
();

53 
Sèπ
();

55 
Time


56 
GëRólPœyTime
(
Time
 
∂ayTime
);

58 
ölöe


59 
SchduÀBuf„rWakeup
(c⁄° 
Time
 
t
, 
DashClõ¡
 * 
˛õ¡
)

61 
	gm_buf„rDñay
 = 
t
;

62 
	gm_dashClõ¡
 = 
˛õ¡
;

65 
	gm_°©e
;

66 
Time
 
	gm_öãºu±i⁄_time
;

67 
	gm_öãºru±i⁄s
;

69 
Time
 
	gm_°¨t_time
;

70 
uöt64_t
 
	gm_tŸÆR©e
;

71 
uöt32_t
 
	gm_möR©e
;

72 
uöt32_t
 
	gm_‰amesPœyed
;

74 
	g¥iv©e
:

76 
PœyFøme
();

78 
Time
 
	gm_œ°∑u£d
;

79 
	g°d
::
queue
<
På
<
Packë
> > 
m_queue
;

80 
Time
 
	gm_buf„rDñay
;

81 
DashClõ¡
 * 
	gm_dashClõ¡
;

	@para.h

1 
usög
 
«me•a˚
 
	g°d
;

2 
	g°d
::
°rög
 
checkã°
;

4 
ve˘‹
 <> 
video_num
;

	@
1
.
1
/usr/include
25
493
algorithms/aaash-client.cc
algorithms/aaash-client.h
algorithms/fdash-client.cc
algorithms/fdash-client.h
algorithms/osmp-client.cc
algorithms/osmp-client.h
algorithms/raahs-client.cc
algorithms/raahs-client.h
algorithms/sftm-client.cc
algorithms/sftm-client.h
algorithms/svaa-client.cc
algorithms/svaa-client.h
dash-client.cc
dash-client.h
dash-server.cc
dash-server.h
http-header.cc
http-header.h
http-parser.cc
http-parser.h
mpeg-header.cc
mpeg-header.h
mpeg-player.cc
mpeg-player.h
para.h
